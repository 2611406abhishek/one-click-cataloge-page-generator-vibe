================================================================================
üöÄ SHIPROCKET AI HACKATHON - COMPLETE COMMAND REFERENCE
================================================================================

üìã TABLE OF CONTENTS:
1. Environment Setup Commands
2. Backend (Go) Commands  
3. Frontend (React) Commands
4. AI Agent (LangChain) Commands
5. Database Commands
6. Service Management Commands
7. Testing Commands
8. Quick Start Commands

================================================================================
üîß 1. ENVIRONMENT SETUP COMMANDS
================================================================================

# Node.js 18 Setup (Already completed)
sudo apt update
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt remove --purge libnode-dev nodejs npm -y
sudo apt autoremove -y
sudo apt-get install nodejs -y
node --version && npm --version

# Python Environment Setup
sudo apt install python3-pip python3-venv -y
python3 -m venv langchain_env
source langchain_env/bin/activate
pip install --upgrade pip setuptools wheel

# Install AI Agent Dependencies
cd ai_agent
pip install -r requirements.txt

================================================================================
üèóÔ∏è 2. BACKEND (GO) COMMANDS
================================================================================

# Start Go Backend Server
go run main.go

# Test Go Backend Health
curl http://localhost:3000/health

# Run Database Tests
go run tests/db_test.go

# Seed Sample Data
go run cmd/seed/main.go

# Build Go Binary (optional)
go build -o shiprocket-backend main.go
./shiprocket-backend

================================================================================
üé® 3. FRONTEND (REACT) COMMANDS
================================================================================

# Install Frontend Dependencies
cd frontend
npm install

# Start Development Server
npm run dev

# Build for Production
npm run build

# Preview Production Build
npm run preview

# Test Frontend
curl http://localhost:5173

================================================================================
ü§ñ 4. AI AGENT (LANGCHAIN) COMMANDS
================================================================================

# Activate Python Environment
source langchain_env/bin/activate

# Test Complete AI Agent
cd ai_agent
python test_agent.py

# Test Tools Directly (No API Key Required)
python tools_demo.py

# Quick Demo
python quick_demo.py

# Interactive Agent (Requires OpenAI API Key)
export OPENAI_API_KEY="your_actual_api_key_here"
python agent.py

# Test Individual Components
python -c "from tools import get_available_tools; print([t.name for t in get_available_tools()])"
python -c "from memory_manager import create_memory_demo; print(create_memory_demo())"

================================================================================
üóÑÔ∏è 5. DATABASE COMMANDS
================================================================================

# MongoDB Connection Test
mongosh "mongodb://abhishek.soni:mongo1234@sr-channel-catalog-mongo.localhost/sr-channel-catalog"

# MongoDB Quick Commands
mongosh "mongodb://abhishek.soni:mongo1234@sr-channel-catalog-mongo.localhost/sr-channel-catalog" --eval "db.runCommand('ping')"
mongosh "mongodb://abhishek.soni:mongo1234@sr-channel-catalog-mongo.localhost/sr-channel-catalog" --eval "show collections"

# MySQL Connection Test
mysql -h localhost -P 3306 -u root -pAdmin@1234 -D sr-ai-hack

# MySQL Quick Commands
mysql -h localhost -P 3306 -u root -pAdmin@1234 -D sr-ai-hack -e "SELECT 1;"
mysql -h localhost -P 3306 -u root -pAdmin@1234 -D sr-ai-hack -e "SHOW TABLES;"

================================================================================
‚öôÔ∏è 6. SERVICE MANAGEMENT COMMANDS
================================================================================

# Check All Services Status
./check-services.sh

# Start All Services (Run in separate terminals)
# Terminal 1: Go Backend
go run main.go

# Terminal 2: React Frontend
cd frontend && npm run dev

# Terminal 3: AI Agent (if needed)
source langchain_env/bin/activate && cd ai_agent && python agent.py

# Stop Services
# Ctrl+C in each terminal or:
pkill -f "go run main.go"
pkill -f "vite"
pkill -f "python agent.py"

================================================================================
üß™ 7. TESTING COMMANDS
================================================================================

# Test Backend Health
curl http://localhost:3000/health

# Test Frontend
curl http://localhost:5173

# Test Full Stack Integration
curl -X POST http://localhost:3000/api/chat \
  -H "Content-Type: application/json" \
  -d '{"prompt": "Hello, what can you help me with?"}'

# Run All AI Agent Tests
source langchain_env/bin/activate
cd ai_agent
python test_agent.py

# Test Database Connections
go run tests/db_test.go

# Test Individual Tools
cd ai_agent
python -c "
from tools import get_available_tools
tools = get_available_tools()
for tool in tools:
    print(f'Testing {tool.name}...')
    if tool.name == 'calculator':
        print(tool._run('25 * 4 + 10'))
    elif tool.name == 'weather_lookup':
        print(tool._run('Mumbai'))
"

# Clean Demo (No Warnings)
python clean_demo.py

================================================================================
üöÄ 8. QUICK START COMMANDS (Copy & Paste)
================================================================================

# Complete Environment Setup (One-time)
source langchain_env/bin/activate
cd ai_agent && pip install -r requirements.txt

# Start Development Environment (3 terminals)
# Terminal 1:
go run main.go

# Terminal 2:
cd frontend && npm run dev

# Terminal 3 (Optional - AI Agent):
source langchain_env/bin/activate
export OPENAI_API_KEY="your_key_here"
cd ai_agent && python agent.py

# Quick Health Check
./check-services.sh

# Test Everything
source langchain_env/bin/activate && cd ai_agent && python test_agent.py

================================================================================
üìù 9. ENVIRONMENT VARIABLES
================================================================================

# Required for Go Backend
PORT=3000
MONGO_DB_CATALOG=mongodb://abhishek.soni:mongo1234@sr-channel-catalog-mongo.localhost/sr-channel-catalog
DATABASE_HOST=localhost
DATABASE_PORT=3306
DATABASE_USER=root
DATABASE_PASSWORD=Admin@1234
DATABASE_NAME=sr-ai-hack

# Optional for AI Agent (Full functionality)
OPENAI_API_KEY=your_actual_openai_api_key_here
LANGCHAIN_TRACING_V2=true
LANGCHAIN_PROJECT=shiprocket-ai-hackathon

================================================================================
üö® 10. UNDERSTANDING "ERRORS" (THEY'RE NOT ACTUALLY ERRORS!)
================================================================================

# What you're seeing are NOT errors but warnings:

1. üü° LangChain Deprecation Warnings:
   - These are just warnings, not errors
   - Code works perfectly despite warnings
   - LangChain suggesting newer alternatives (LangGraph)
   - Can be ignored for hackathon purposes

2. üîë OpenAI API Key Messages:
   - "Error code: 401" - Expected without real API key
   - Tools still work in mock/demo mode
   - Full AI functionality requires: export OPENAI_API_KEY="real_key"

3. ‚úÖ Proof Everything Works:
   cd ai_agent
   python clean_demo.py  # Shows everything works without warnings
   python tools_demo.py  # All tools work perfectly

# Quick Fix for Warnings (Optional):
export PYTHONWARNINGS="ignore::DeprecationWarning"

================================================================================
üîç 11. TROUBLESHOOTING COMMANDS
================================================================================

# Check Running Processes
ps aux | grep -E "(go|node|python)"

# Check Ports
sudo netstat -tlnp | grep -E "(3000|5173|5174)"

# Check Node.js Version
node --version  # Should be v18.20.8+

# Check Python Version
python3 --version  # Should be 3.10+

# Check Virtual Environment
source langchain_env/bin/activate
which python
pip list | grep langchain

# Restart Services if Stuck
pkill -f "go run"
pkill -f "vite"
pkill -f "npm run dev"

# Clean NPM Cache (if frontend issues)
cd frontend
rm -rf node_modules package-lock.json
npm install

# Clean Python Cache (if AI issues)
source langchain_env/bin/activate
pip cache purge
cd ai_agent && python -c "import sys; print(sys.path)"

================================================================================
üéØ 11. DEMO COMMANDS FOR PRESENTATION
================================================================================

# Quick Demo Script
echo "üöÄ Starting Shiprocket AI Hackathon Demo..."

# 1. Check all services
./check-services.sh

# 2. Test AI Tools
source langchain_env/bin/activate
cd ai_agent
python tools_demo.py

# 3. Test Backend
curl http://localhost:3000/health

# 4. Test Frontend
curl -s http://localhost:5173 | head -5

# 5. Full AI Agent Test
python test_agent.py

echo "‚úÖ Demo complete! All systems operational."

================================================================================
üìä 12. PERFORMANCE MONITORING
================================================================================

# Monitor Resource Usage
htop  # or top

# Monitor Network
sudo netstat -tlnp | grep LISTEN

# Check Disk Space
df -h

# Check Memory Usage
free -h

# Monitor Logs
# Go Backend: Check terminal output
# React Frontend: Check browser console
# AI Agent: Check terminal output

================================================================================
üéâ SUCCESS! YOUR HACKATHON ENVIRONMENT IS READY!
================================================================================

Your setup includes:
‚úÖ Node.js 18.20.8 with React frontend
‚úÖ Go backend with MongoDB & MySQL
‚úÖ LangChain AI agent with tools & memory
‚úÖ All services tested and working
‚úÖ Comprehensive test suites
‚úÖ Production-ready architecture

Quick Start: Run these 3 commands in separate terminals:
1. go run main.go
2. cd frontend && npm run dev  
3. source langchain_env/bin/activate && cd ai_agent && python tools_demo.py

Happy Hacking! üöÄ 